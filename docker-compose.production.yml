# ==========================================
# Production Docker Compose Configuration
# 佐渡飲食店マップ Phase 3-Full 本番環境
# ==========================================

version: '3.8'

services:
  # ===== Production Redis Cluster (高可用性設定) =====

  # Redis Cluster Master Nodes
  redis-master-1:
    image: redis:7-alpine
    container_name: sado-redis-master-1-prod
    ports:
      - "7001:7001"
      - "17001:17001"
    volumes:
      - redis-master-1-prod:/data
      - ./config/redis/redis-master-1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  redis-master-2:
    image: redis:7-alpine
    container_name: sado-redis-master-2-prod
    ports:
      - "7002:7002"
      - "17002:17002"
    volumes:
      - redis-master-2-prod:/data
      - ./config/redis/redis-master-2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  redis-master-3:
    image: redis:7-alpine
    container_name: sado-redis-master-3-prod
    ports:
      - "7003:7003"
      - "17003:17003"
    volumes:
      - redis-master-3-prod:/data
      - ./config/redis/redis-master-3.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7003", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis Replica Nodes
  redis-replica-1:
    image: redis:7-alpine
    container_name: sado-redis-replica-1-prod
    ports:
      - "7004:7004"
      - "17004:17004"
    volumes:
      - redis-replica-1-prod:/data
      - ./config/redis/redis-replica-1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    depends_on:
      redis-master-1:
        condition: service_healthy
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7004", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  redis-replica-2:
    image: redis:7-alpine
    container_name: sado-redis-replica-2-prod
    ports:
      - "7005:7005"
      - "17005:17005"
    volumes:
      - redis-replica-2-prod:/data
      - ./config/redis/redis-replica-2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    depends_on:
      redis-master-2:
        condition: service_healthy
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7005", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  redis-replica-3:
    image: redis:7-alpine
    container_name: sado-redis-replica-3-prod
    ports:
      - "7006:7006"
      - "17006:17006"
    volumes:
      - redis-replica-3-prod:/data
      - ./config/redis/redis-replica-3.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    depends_on:
      redis-master-3:
        condition: service_healthy
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7006", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ===== Celery Workers (分散処理) =====

  # Celery Worker High Priority
  celery-worker-high:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sado-celery-worker-high-prod
    environment:
      - CELERY_BROKER_URL=redis://redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - CELERY_RESULT_BACKEND=redis://redis-master-1:7001
      - WORKER_TYPE=high_priority
      - WORKER_CONCURRENCY=4
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
    volumes:
      - ./logs/celery:/app/logs
    depends_on:
      redis-master-1:
        condition: service_healthy
      redis-master-2:
        condition: service_healthy
      redis-master-3:
        condition: service_healthy
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    healthcheck:
      test: ["CMD", "celery", "-A", "distributed_tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"

  # Celery Worker Normal Priority
  celery-worker-normal:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sado-celery-worker-normal-prod
    environment:
      - CELERY_BROKER_URL=redis://redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - CELERY_RESULT_BACKEND=redis://redis-master-1:7001
      - WORKER_TYPE=normal_priority
      - WORKER_CONCURRENCY=6
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
    volumes:
      - ./logs/celery:/app/logs
    depends_on:
      redis-master-1:
        condition: service_healthy
    networks:
      - sado-production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 750M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "celery", "-A", "distributed_tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "150m"
        max-file: "5"

  # ===== Main Application =====

  # React Frontend (Production Build)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
      target: production
    container_name: sado-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=${API_BASE_URL:-"https://api.sado-restaurant-map.com"}
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-server
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # API Server (FastAPI/Express)
  api-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: sado-api-server-prod
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - API_PORT=8000
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - CELERY_BROKER_URL=redis://redis-master-1:7001
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=3600
    volumes:
      - ./logs/api:/app/logs
    depends_on:
      redis-master-1:
        condition: service_healthy
      celery-worker-high:
        condition: service_healthy
    networks:
      - sado-production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"

  # ===== Monitoring & Observability =====

  # Prometheus (メトリクス収集)
  prometheus:
    image: prom/prometheus:latest
    container_name: sado-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-prod-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Grafana (可視化ダッシュボード)
  grafana:
    image: grafana/grafana:latest
    container_name: sado-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-prod-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis Exporter (Redis メトリクス)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-prod
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-1:7001,redis://redis-master-2:7002,redis://redis-master-3:7003
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
    depends_on:
      - redis-master-1
      - redis-master-2
      - redis-master-3
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # ===== Security & Backup =====

  # Redis Backup Service
  redis-backup:
    image: alpine:latest
    container_name: sado-redis-backup-prod
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # 毎日午前2時
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./backups/redis:/backups
      - ./scripts/backup-redis.sh:/scripts/backup-redis.sh:ro
    command: |
      sh -c "
        apk add --no-cache redis dcron
        echo '0 2 * * * /scripts/backup-redis.sh' | crontab -
        crond -f
      "
    depends_on:
      - redis-master-1
      - redis-master-2
      - redis-master-3
    networks:
      - sado-production
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

# ===== Networks =====
networks:
  sado-production:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ===== Volumes =====
volumes:
  # Redis Data
  redis-master-1-prod:
    driver: local
  redis-master-2-prod:
    driver: local
  redis-master-3-prod:
    driver: local
  redis-replica-1-prod:
    driver: local
  redis-replica-2-prod:
    driver: local
  redis-replica-3-prod:
    driver: local

  # Monitoring Data
  prometheus-prod-data:
    driver: local
  grafana-prod-data:
    driver: local
