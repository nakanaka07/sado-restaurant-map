name: Lighthouse CI

on:
  workflow_run:
    workflows: [CI]
    types: [completed]

jobs:
  lhci:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dist artifacts from CI
        uses: actions/download-artifact@v4
        with:
          name: dist-build
          path: dist
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify dist exists
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Error: dist directory is empty or missing"
            exit 1
          fi
          echo "dist/ contents verified"
          ls -lh dist/ | head -20

      - name: Run Lighthouse CI
        run: npx lhci autorun --config=lighthouserc.json || echo "LHCI finished with non-zero exit (soft fail)"

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v5
        with:
          name: lighthouse-report
          path: .lighthouseci
          if-no-files-found: ignore
          retention-days: 3

      - name: Extract Lighthouse scores & thresholds
        id: scores
        run: |
          manifest=.lighthouseci/manifest.json
          if [ ! -f "$manifest" ]; then echo "Manifest missing"; exit 0; fi
          node -e "const fs=require('fs');const m=JSON.parse(fs.readFileSync('.lighthouseci/manifest.json','utf8'));const rep=m[0];const cat=rep.summary;const pct=v=>Math.round(v*100);const scores={performance:pct(cat.performance||0),accessibility:pct(cat.accessibility||0),seo:pct(cat.seo||0),best:pct(cat['best-practices']||cat.bestPractices||0),pwa:pct(cat.pwa||0)};fs.writeFileSync('lh-scores.json', JSON.stringify(scores,null,2));console.log('Scores:',scores);"
          cat lh-scores.json
          PERF_WARN=70; PERF_FAIL=60; ACC_WARN=85; ACC_FAIL=75
          perf=$(jq '.performance' lh-scores.json); acc=$(jq '.accessibility' lh-scores.json)
          status="ok"
          if [ "$perf" -lt $PERF_FAIL ] || [ "$acc" -lt $ACC_FAIL ]; then status="fail"; fi
          if [ "$status" = "fail" ]; then echo "hard_fail=true" >> $GITHUB_OUTPUT; else echo "hard_fail=false" >> $GITHUB_OUTPUT; fi
          echo "perf=$perf" >> $GITHUB_OUTPUT
          echo "acc=$acc" >> $GITHUB_OUTPUT

      - name: Post PR comment (if applicable)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          set -e
          resp=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -H 'Accept: application/vnd.github+json' https://api.github.com/repos/$REPO/commits/$HEAD_SHA/pulls)
          pr=$(echo "$resp" | jq -r '.[0].number // empty')
          if [ -z "$pr" ]; then echo "No PR found for head sha"; exit 0; fi
          scores=$(cat lh-scores.json | jq -r '. | to_entries | map("| " + .key + " | " + (.value|tostring) + "% |") | join("\n")')
          body="<!--lhci-report-->\n### Lighthouse Scores\n| Category | Score |\n|----------|-------|\n${scores}\n"
          curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H 'Accept: application/vnd.github+json' -d "$(jq -nc --arg body "$body" '{body:$body}')" https://api.github.com/repos/$REPO/issues/$pr/comments > /dev/null || echo 'Comment failed'

      - name: Summary
        run: |
          echo "Lighthouse CI run completed" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.scores.outputs.hard_fail }}" = "true" ]; then echo "One or more scores below hard fail threshold" >> $GITHUB_STEP_SUMMARY; fi

      - name: Enforce fail thresholds
        if: steps.scores.outputs.hard_fail == 'true'
        run: |
          echo "Failing due to Lighthouse score below hard threshold." >&2
          exit 1

      - name: Persist Lighthouse scores (main only)
        if: github.ref == 'refs/heads/main' && steps.scores.outputs.perf != ''
        run: |
          if [ -f lh-scores.json ]; then
            mkdir -p metrics/lighthouse
            ts=$(date -u +%Y%m%dT%H%M%SZ)
            cp lh-scores.json metrics/lighthouse/$ts.json
            git config user.name 'github-actions'
            git config user.email 'actions@github.com'
            git add metrics/lighthouse/$ts.json || true
            git commit -m "chore: add lighthouse score $ts [skip ci]" || echo 'No diff to commit'
            git push || echo 'Push failed (permissions?)'
          else
            echo 'lh-scores.json missing; skip persistence'
          fi
