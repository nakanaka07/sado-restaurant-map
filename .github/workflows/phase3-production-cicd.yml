# Phase 3-Full CI/CD パイプライン - Docker環境でのビルド・テスト・デプロイメント自動化

name: Phase3 Production CI/CD

on:
  push:
    branches: [main, develop, feature/phase3-*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "デプロイ対象環境"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      deployment_strategy:
        description: "デプロイメント戦略"
        required: true
        default: "blue-green"
        type: choice
        options:
          - blue-green
          - canary
          - rolling

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 22
  PYTHON_VERSION: 3.12

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===== 環境セットアップと依存関係チェック =====
  setup-and-validate:
    name: 🔧 環境セットアップ
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-node-key: ${{ steps.node-cache.outputs.cache-hit }}
      cache-python-key: ${{ steps.python-cache.outputs.cache-hit }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: pnpm セットアップ
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Node.js 依存関係キャッシュ
        id: node-cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Python 依存関係キャッシュ
        id: python-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 依存関係インストール
        run: |
          # Node.js 依存関係
          pnpm config set registry https://registry.npmjs.org
          pnpm config set fetch-retries 5
          pnpm install --frozen-lockfile

          # Python 依存関係
          pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: デプロイ必要性チェック
        id: deploy-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # ===== 並列品質チェック =====
  code-quality:
    name: 📊 コード品質チェック
    runs-on: ubuntu-latest
    needs: setup-and-validate
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        check-type:
          - linting
          - formatting
          - complexity
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: pnpm セットアップ
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 依存関係復元
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 依存関係インストール
        run: pnpm install --frozen-lockfile

      - name: ESLint チェック
        if: matrix.check-type == 'linting'
        run: |
          pnpm run lint
          pnpm run typecheck

      - name: Markdownlint チェック
        if: matrix.check-type == 'formatting'
        run: pnpm run lint:md

      - name: 複雑度分析
        if: matrix.check-type == 'complexity'
        run: |
          pnpm run analyze:deps
          pnpm run analyze:coupling

  security-scan:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    needs: setup-and-validate
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        scan-type:
          - dependencies
          - code-security
          - docker-security
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node.js セキュリティ監査
        if: matrix.scan-type == 'dependencies'
        run: |
          npm audit --audit-level=moderate
          pnpm audit --audit-level=moderate

      - name: Python セキュリティスキャン (Bandit)
        if: matrix.scan-type == 'code-security'
        run: |
          pip install bandit[toml]
          bandit -r tools/scraper -f json -o bandit-report.json || true
          bandit -r tools/scraper --severity-level medium

      - name: Docker セキュリティスキャン
        if: matrix.scan-type == 'docker-security'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: local://phase3-app
          only-severities: critical,high,medium
          exit-code: true

  # ===== テスト実行 =====
  unit-tests:
    name: 🧪 単体テスト
    runs-on: ubuntu-latest
    needs: setup-and-validate
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - frontend
          - backend
          - integration
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Python セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: pnpm セットアップ
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 依存関係復元
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 依存関係インストール
        run: |
          pnpm install --frozen-lockfile
          pip install -r requirements-test.txt

      - name: フロントエンドテスト
        if: matrix.test-suite == 'frontend'
        run: |
          pnpm run test:coverage
        env:
          VITE_GOOGLE_MAPS_API_KEY: test-key
          VITE_GOOGLE_MAPS_MAP_ID: test-map-id

      - name: バックエンドテスト
        if: matrix.test-suite == 'backend'
        run: |
          cd tools/scraper
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: 統合テスト
        if: matrix.test-suite == 'integration'
        run: pnpm run integration:test

      - name: カバレッジレポート アップロード
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./tools/scraper/coverage.xml
          fail_ci_if_error: false

  # ===== SonarQube 品質分析 =====
  sonarqube-analysis:
    name: 📈 SonarQube 品質分析
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, unit-tests]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube スキャン
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || 'dummy-token' }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'http://localhost:9000' }}

      - name: 品質ゲート確認
        run: |
          echo "SonarQube品質ゲートチェック完了"

  # ===== Docker イメージビルド =====
  docker-build:
    name: 🐳 Docker イメージビルド
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis]
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: app
            dockerfile: Dockerfile.app
          - image: worker
            dockerfile: Dockerfile.worker
          - image: test
            dockerfile: Dockerfile.test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Buildx セットアップ
        uses: docker/setup-buildx-action@v3

      - name: レジストリログイン
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: メタデータ抽出
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: イメージビルド・プッシュ
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ===== Phase3 統合テスト =====
  integration-tests:
    name: 🔄 Phase3 統合テスト
    runs-on: ubuntu-latest
    needs: docker-build
    timeout-minutes: 60
    services:
      redis-master-1:
        image: redis:7-alpine
        ports:
          - 7001:7001
        options: >-
          --health-cmd "redis-cli -p 7001 ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Phase3 環境起動
        run: |
          docker-compose -f docker-compose.phase3.yml up -d
          sleep 60  # サービス起動待機

      - name: ヘルスチェック実行
        run: |
          ./tools/testing/health-check.sh

      - name: Redis クラスター テスト
        run: |
          python test_distributed_processing.py

      - name: 負荷テスト
        run: |
          ./tools/testing/load-test.sh

      - name: ログ収集
        if: always()
        run: |
          docker-compose -f docker-compose.phase3.yml logs > integration-logs.txt

      - name: 環境クリーンアップ
        if: always()
        run: |
          docker-compose -f docker-compose.phase3.yml down -v

      - name: テスト結果アップロード
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-logs.txt
            ml_engine_integration_test_result.json

  # ===== デプロイメント (本番環境) =====
  deploy-production:
    name: 🚀 本番デプロイメント
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    strategy:
      matrix:
        deployment-strategy:
          - blue-green
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ブルー・グリーンデプロイメント
        if: matrix.deployment-strategy == 'blue-green'
        run: |
          echo "🔵 ブルー・グリーンデプロイ実行中..."
          # ./tools/deployment/blue-green-deploy.sh

      - name: カナリアデプロイメント
        if: github.event.inputs.deployment_strategy == 'canary'
        run: |
          echo "🐤 カナリアデプロイ実行中..."
          # ./tools/deployment/canary-deploy.sh

      - name: ローリングデプロイメント
        if: github.event.inputs.deployment_strategy == 'rolling'
        run: |
          echo "🔄 ローリングデプロイ実行中..."
          # ./tools/deployment/rolling-deploy.sh

      - name: ポストデプロイ検証
        run: |
          echo "✅ ポストデプロイ検証実行中..."
          # ./tools/deployment/post-deploy-validation.sh

      - name: Slack通知
        if: always()
        run: |
          echo "📢 デプロイメント通知: ${{ job.status }}"

  # ===== 監視・アラート設定 =====
  setup-monitoring:
    name: 📊 監視セットアップ
    runs-on: ubuntu-latest
    needs: [deploy-production]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prometheus設定更新
        run: |
          ./tools/monitoring/update-prometheus-config.sh

      - name: Grafanaダッシュボード更新
        run: |
          ./tools/monitoring/update-grafana-dashboards.sh

      - name: アラート設定
        run: |
          ./tools/monitoring/configure-alerts.sh

      - name: ヘルスチェック監視開始
        run: |
          ./tools/monitoring/start-health-monitoring.sh
