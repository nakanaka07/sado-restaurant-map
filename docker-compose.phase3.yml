version: "3.8"

services:
  # Redis Cluster for distributed caching
  redis-master:
    image: redis:7-alpine
    container_name: sado-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for distributed processing
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sado-celery-worker
    depends_on:
      - redis-master
    environment:
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-master:6379/0
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - sado-network
    restart: unless-stopped
    command: celery -A scripts.celery_app worker --loglevel=info

  # nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: sado-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app-server-1
      - app-server-2
    networks:
      - sado-network
    restart: unless-stopped

  # Application Server 1
  app-server-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: sado-app-1
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis-master:6379
      - SERVER_ID=app-1
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis-master
    networks:
      - sado-network
    restart: unless-stopped

  # Application Server 2
  app-server-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: sado-app-2
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis-master:6379
      - SERVER_ID=app-2
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis-master
    networks:
      - sado-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sado-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - sado-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sado-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sado-network
    restart: unless-stopped

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-master:6379
    depends_on:
      - redis-master
    networks:
      - sado-network
    restart: unless-stopped

networks:
  sado-network:
    driver: bridge

volumes:
  redis-master-data:
  prometheus-data:
  grafana-data:
