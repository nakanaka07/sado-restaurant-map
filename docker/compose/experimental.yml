services:
  # ===== Redis Cluster Configuration (3 Masters + 3 Replicas) =====

  # Redis Cluster Master Node 1
  redis-master-1:
    image: redis:7-alpine
    container_name: sado-redis-master-1
    ports:
      - "7001:7001"
      - "17001:17001"
    volumes:
      - redis-master-1-data:/data/redis-master-1
      - ./config/redis/redis-master-1.conf:/usr/local/etc/redis/redis-master-1.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-master-1.conf
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster Master Node 2
  redis-master-2:
    image: redis:7-alpine
    container_name: sado-redis-master-2
    ports:
      - "7002:7002"
      - "17002:17002"
    volumes:
      - redis-master-2-data:/data/redis-master-2
      - ./config/redis/redis-master-2.conf:/usr/local/etc/redis/redis-master-2.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-master-2.conf
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster Master Node 3
  redis-master-3:
    image: redis:7-alpine
    container_name: sado-redis-master-3
    ports:
      - "7003:7003"
      - "17003:17003"
    volumes:
      - redis-master-3-data:/data/redis-master-3
      - ./config/redis/redis-master-3.conf:/usr/local/etc/redis/redis-master-3.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-master-3.conf
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7003", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster Replica Node 1
  redis-replica-1:
    image: redis:7-alpine
    container_name: sado-redis-replica-1
    ports:
      - "7004:7004"
      - "17004:17004"
    volumes:
      - redis-replica-1-data:/data/redis-replica-1
      - ./config/redis/redis-replica-1.conf:/usr/local/etc/redis/redis-replica-1.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-replica-1.conf
    depends_on:
      - redis-master-1
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7004", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster Replica Node 2
  redis-replica-2:
    image: redis:7-alpine
    container_name: sado-redis-replica-2
    ports:
      - "7005:7005"
      - "17005:17005"
    volumes:
      - redis-replica-2-data:/data/redis-replica-2
      - ./config/redis/redis-replica-2.conf:/usr/local/etc/redis/redis-replica-2.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-replica-2.conf
    depends_on:
      - redis-master-2
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7005", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster Replica Node 3
  redis-replica-3:
    image: redis:7-alpine
    container_name: sado-redis-replica-3
    ports:
      - "7006:7006"
      - "17006:17006"
    volumes:
      - redis-replica-3-data:/data/redis-replica-3
      - ./config/redis/redis-replica-3.conf:/usr/local/etc/redis/redis-replica-3.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-replica-3.conf
    depends_on:
      - redis-master-3
    networks:
      - sado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7006", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster 初期化サービス
  redis-cluster-init:
    image: redis:7-alpine
    container_name: sado-redis-cluster-init
    depends_on:
      - redis-master-1
      - redis-master-2
      - redis-master-3
      - redis-replica-1
      - redis-replica-2
      - redis-replica-3
    networks:
      - sado-network
    volumes:
      - ./tools/scripts:/scripts
    command: >
      sh -c "
        sleep 30;
        echo 'Redis Cluster を初期化中...';
        redis-cli --cluster create
        redis-master-1:7001
        redis-master-2:7002
        redis-master-3:7003
        redis-replica-1:7004
        redis-replica-2:7005
        redis-replica-3:7006
        --cluster-replicas 1 --cluster-yes;
        echo 'Redis Cluster 初期化完了';
      "
    restart: "no"

  # Celery Worker for distributed processing
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sado-celery-worker
    depends_on:
      - redis-cluster-init
    environment:
      - CELERY_BROKER_URL=redis://redis-master-1:7001/0,redis://redis-master-2:7002/0,redis://redis-master-3:7003/0
      - CELERY_RESULT_BACKEND=redis://redis-master-1:7001/0,redis://redis-master-2:7002/0,redis://redis-master-3:7003/0
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003,redis-replica-1:7004,redis-replica-2:7005,redis-replica-3:7006
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - sado-network
    restart: unless-stopped
    command: celery -A scripts.celery_app worker --loglevel=info

  # nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: sado-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app-server-1
      - app-server-2
    networks:
      - sado-network
    restart: unless-stopped

  # Application Server 1
  app-server-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: sado-app-1
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003,redis-replica-1:7004,redis-replica-2:7005,redis-replica-3:7006
      - REDIS_PASSWORD=sado_redis_2025
      - SERVER_ID=app-1
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis-cluster-init
    networks:
      - sado-network
    restart: unless-stopped

  # Application Server 2
  app-server-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: sado-app-2
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003,redis-replica-1:7004,redis-replica-2:7005,redis-replica-3:7006
      - REDIS_PASSWORD=sado_redis_2025
      - SERVER_ID=app-2
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis-cluster-init
    networks:
      - sado-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sado-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - sado-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sado-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sado-network
    restart: unless-stopped

  # Redis Exporter for Prometheus (複数ノード監視)
  redis-exporter-master-1:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-master-1
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-1:7001
      - REDIS_PASSWORD=sado_redis_2025
    depends_on:
      - redis-master-1
    networks:
      - sado-network
    restart: unless-stopped

  redis-exporter-master-2:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-master-2
    ports:
      - "9122:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-2:7002
      - REDIS_PASSWORD=sado_redis_2025
    depends_on:
      - redis-master-2
    networks:
      - sado-network
    restart: unless-stopped

  redis-exporter-master-3:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-master-3
    ports:
      - "9123:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-3:7003
      - REDIS_PASSWORD=sado_redis_2025
    depends_on:
      - redis-master-3
    networks:
      - sado-network
    restart: unless-stopped

networks:
  sado-network:
    driver: bridge

volumes:
  # Redis Cluster データボリューム
  redis-master-1-data:
  redis-master-2-data:
  redis-master-3-data:
  redis-replica-1-data:
  redis-replica-2-data:
  redis-replica-3-data:

  # 監視システム データボリューム
  prometheus-data:
  grafana-data:
