# Phase 3-Full Integration Test Environment
# 統合テスト環境 - Redis + Celery + Docker + Performance + Security Testing

services:
  # ===== Redis Cluster Configuration =====
  redis-master-1:
    image: redis:7-alpine
    container_name: sado-redis-master-1-integration
    ports:
      - "7001:7001"
      - "17001:17001"
    volumes:
      - redis-master-1-data:/data
      - ./config/redis/redis-master-1.conf:/usr/local/etc/redis/redis-master-1.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-master-1.conf
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis-master-2:
    image: redis:7-alpine
    container_name: sado-redis-master-2-integration
    ports:
      - "7002:7002"
      - "17002:17002"
    volumes:
      - redis-master-2-data:/data
      - ./config/redis/redis-master-2.conf:/usr/local/etc/redis/redis-master-2.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-master-2.conf
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis-master-3:
    image: redis:7-alpine
    container_name: sado-redis-master-3-integration
    ports:
      - "7003:7003"
      - "17003:17003"
    volumes:
      - redis-master-3-data:/data
      - ./config/redis/redis-master-3.conf:/usr/local/etc/redis/redis-master-3.conf
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis-master-3.conf
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7003", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis Cluster初期化
  redis-cluster-init:
    image: redis:7-alpine
    container_name: sado-redis-cluster-init-integration
    depends_on:
      redis-master-1:
        condition: service_healthy
      redis-master-2:
        condition: service_healthy
      redis-master-3:
        condition: service_healthy
    networks:
      - sado-integration-network
    command: >
      sh -c "
        sleep 15;
        echo 'Redis Cluster初期化開始...';
        redis-cli --cluster create
        redis-master-1:7001
        redis-master-2:7002
        redis-master-3:7003
        --cluster-replicas 0 --cluster-yes;
        echo 'Redis Cluster初期化完了';
      "
    restart: "no"

  # ===== Celery Workers =====
  celery-worker-high:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sado-celery-worker-high-integration
    depends_on:
      redis-cluster-init:
        condition: service_completed_successfully
    environment:
      - CELERY_BROKER_URL=redis://redis-master-1:7001/0
      - CELERY_RESULT_BACKEND=redis://redis-master-1:7001/0
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - REDIS_PASSWORD=sado_redis_2025
      - PYTHONPATH=/app
      - ENVIRONMENT=integration
      - WORKER_TYPE=high_priority
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - sado-integration-network
    restart: unless-stopped
    command: celery -A tools.scraper.shared.celery_config worker --loglevel=info --queues=high_priority,normal --concurrency=2
    healthcheck:
      test: ["CMD", "celery", "-A", "tools.scraper.shared.celery_config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker-background:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sado-celery-worker-background-integration
    depends_on:
      redis-cluster-init:
        condition: service_completed_successfully
    environment:
      - CELERY_BROKER_URL=redis://redis-master-2:7002/0
      - CELERY_RESULT_BACKEND=redis://redis-master-2:7002/0
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - REDIS_PASSWORD=sado_redis_2025
      - PYTHONPATH=/app
      - ENVIRONMENT=integration
      - WORKER_TYPE=background
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - sado-integration-network
    restart: unless-stopped
    command: celery -A tools.scraper.shared.celery_config worker --loglevel=info --queues=background,maintenance,validation --concurrency=1

  # ===== Application Servers =====
  app-server-integration:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: sado-app-integration
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=integration
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - REDIS_PASSWORD=sado_redis_2025
      - SERVER_ID=app-integration
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-dummy_key_for_testing}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      redis-cluster-init:
        condition: service_completed_successfully
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Performance Monitoring =====
  prometheus:
    image: prom/prometheus:latest
    container_name: sado-prometheus-integration
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/integration.yml:/etc/prometheus/integration.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=24h"
      - "--web.enable-lifecycle"
      - "--log.level=info"
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: sado-grafana-integration
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=integration123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-worldmap-panel
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/integration:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Redis Exporters =====
  redis-exporter-master-1:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-master-1-integration
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-1:7001
      - REDIS_PASSWORD=sado_redis_2025
    depends_on:
      - redis-master-1
    networks:
      - sado-integration-network
    restart: unless-stopped

  redis-exporter-master-2:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-master-2-integration
    ports:
      - "9122:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-2:7002
      - REDIS_PASSWORD=sado_redis_2025
    depends_on:
      - redis-master-2
    networks:
      - sado-integration-network
    restart: unless-stopped

  redis-exporter-master-3:
    image: oliver006/redis_exporter:latest
    container_name: sado-redis-exporter-master-3-integration
    ports:
      - "9123:9121"
    environment:
      - REDIS_ADDR=redis://redis-master-3:7003
      - REDIS_PASSWORD=sado_redis_2025
    depends_on:
      - redis-master-3
    networks:
      - sado-integration-network
    restart: unless-stopped

  # ===== Security Testing =====
  sonarqube:
    image: sonarqube:community
    container_name: sado-sonarqube-integration
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions
      - sonarqube-logs:/opt/sonarqube/logs
    depends_on:
      - postgres
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:13-alpine
    container_name: sado-postgres-integration
    environment:
      - POSTGRES_DB=sonar
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "sonar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Load Testing =====
  locust:
    image: locustio/locust:latest
    container_name: sado-locust-integration
    ports:
      - "8089:8089"
    volumes:
      - ./tools/testing/load-tests:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host=http://app-server-integration:3000
    depends_on:
      - app-server-integration
    networks:
      - sado-integration-network
    restart: unless-stopped

  # ===== Log Aggregation =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: sado-elasticsearch-integration
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: sado-kibana-integration
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sado-integration-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Testing Services =====
  integration-test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: sado-integration-test-runner
    environment:
      - CELERY_BROKER_URL=redis://redis-master-1:7001/0
      - REDIS_CLUSTER_NODES=redis-master-1:7001,redis-master-2:7002,redis-master-3:7003
      - PYTHONPATH=/app
      - ENVIRONMENT=integration
      - TEST_MODE=integration
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    depends_on:
      app-server-integration:
        condition: service_healthy
      celery-worker-high:
        condition: service_healthy
    networks:
      - sado-integration-network
    command: >
      sh -c "
        echo 'Waiting for services to be ready...';
        sleep 30;
        echo 'Running integration tests...';
        python test_distributed_processing.py;
        echo 'Integration tests completed';
      "
    restart: "no"

networks:
  sado-integration-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Redis データボリューム
  redis-master-1-data:
  redis-master-2-data:
  redis-master-3-data:

  # 監視システムボリューム
  prometheus-data:
  grafana-data:

  # セキュリティテストボリューム
  sonarqube-data:
  sonarqube-extensions:
  sonarqube-logs:
  postgres-data:

  # ログ集約ボリューム
  elasticsearch-data:
