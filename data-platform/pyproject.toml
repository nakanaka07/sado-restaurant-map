[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sado-restaurant-map-data-platform"
version = "2.2.0"
description = "Data collection and processing platform for Sado Restaurant Map using Google Places API"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Sado Restaurant Map Team"}
]
keywords = ["google-places", "data-collection", "etl", "clean-architecture"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.14",
]

dependencies = [
    # Google API integration
    "google-auth>=2.23.0",
    "google-auth-oauthlib>=1.1.0",
    "google-api-python-client>=2.100.0",
    "gspread>=5.10.0",

    # HTTP communication and data processing
    "requests>=2.31.0",
    "pandas>=2.1.0",

    # Environment and configuration management
    "python-dotenv>=1.0.0",

    # Type safety
    "typing_extensions>=4.7.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
]

# Phase 3: Machine Learning features
ml = [
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
]

# Phase 3: Distributed processing
distributed = [
    "redis>=4.5.0",
    "celery>=5.3.0",
    "kombu>=5.3.0",
]

# Performance and monitoring
monitoring = [
    "structlog>=23.1.0",
    "aiohttp>=3.8.0",
]

# All optional dependencies
all = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "redis>=4.5.0",
    "celery>=5.3.0",
    "kombu>=5.3.0",
    "structlog>=23.1.0",
    "aiohttp>=3.8.0",
]

[project.scripts]
sado-scraper = "interface.cli.main:main"

[tool.setuptools]
packages = ["application", "core", "infrastructure", "interface", "shared"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=shared",
    "--cov=core",
    "--cov=application",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=json",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "redis: marks tests that require Redis",
    "api: marks tests that require external API access",
    "performance: marks tests that measure performance",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning:sklearn.*",
    "ignore::ImportWarning",
]

[tool.coverage.run]
source = ["shared", "core", "application", "infrastructure", "interface"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_equality = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "gspread.*",
    "google.*",
    "sklearn.*",
    "redis.*",
    "celery.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "venv",
    "build",
    "dist",
]
