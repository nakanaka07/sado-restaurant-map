import { describe, it, expect, vi, beforeEach } from "vitest";
import { render, screen, fireEvent } from "@testing-library/react";
import { RestaurantMap } from "./RestaurantMap";
import type { Restaurant } from "@/types";
import type { ReactNode } from "react";

// ÂûãÂÆöÁæ©
interface MockMapProps {
  children?: ReactNode;
  defaultCenter?: { lat: number; lng: number };
  defaultZoom?: number;
  mapId?: string;
  gestureHandling?: string;
  disableDefaultUI?: boolean;
  mapTypeControl?: boolean;
  fullscreenControl?: boolean;
  streetViewControl?: boolean;
  zoomControl?: boolean;
}

interface MockAdvancedMarkerProps {
  onClick?: () => void;
  title?: string;
  position?: { lat: number; lng: number };
  children?: ReactNode;
}

interface MockPinProps {
  background?: string;
  borderColor?: string;
  glyphColor?: string;
}

interface MockInfoWindowProps {
  children?: ReactNode;
  onCloseClick?: () => void;
  position?: { lat: number; lng: number };
}

// Google Maps API „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„É¢„ÉÉ„ÇØ
vi.mock("@vis.gl/react-google-maps", () => ({
  Map: ({ children, ...props }: MockMapProps) => (
    <div data-testid="google-map" {...props}>
      {children}
    </div>
  ),
  AdvancedMarker: ({ onClick, title, ...props }: MockAdvancedMarkerProps) => (
    <div
      data-testid="advanced-marker"
      data-title={title}
      onClick={onClick}
      {...props}
    >
      Marker: {title}
    </div>
  ),
  Pin: ({ background, ...props }: MockPinProps) => (
    <div data-testid="pin" data-background={background} {...props}>
      Pin
    </div>
  ),
  InfoWindow: ({ children, onCloseClick, ...props }: MockInfoWindowProps) => (
    <div data-testid="info-window" {...props}>
      <button data-testid="close-info-window" onClick={onCloseClick}>
        √ó
      </button>
      {children}
    </div>
  ),
}));

// Analytics „É¢„ÉÉ„ÇØ
vi.mock("@/utils/analytics", () => ({
  trackRestaurantClick: vi.fn(),
  trackMapInteraction: vi.fn(),
}));

describe("RestaurantMap", () => {
  const mockRestaurants: Restaurant[] = [
    {
      id: "1",
      name: "ÂØøÂè∏Âá¶ÈáëÂ≥∞",
      address: "‰ΩêÊ∏°Â∏Ç‰∏°Ê¥•Êπä353",
      cuisineType: "ÂØøÂè∏",
      priceRange: "2000-3000ÂÜÜ",
      coordinates: { lat: 38.0751, lng: 138.4094 },
      phone: "0259-27-5473",
      rating: 4.2,
      features: ["ÈßêËªäÂ†¥„ÅÇ„Çä", "Á¶ÅÁÖô"],
      openingHours: [
        {
          day: "ÊúàÊõúÊó•",
          open: "11:00",
          close: "21:00",
          isHoliday: false,
        },
      ],
      lastUpdated: "2025-08-01T00:00:00Z",
    },
    {
      id: "2",
      name: "„Åù„Å∞Âá¶Á´π„ÅÆÂ≠ê",
      address: "‰ΩêÊ∏°Â∏ÇÈáë‰∫ïÊñ∞‰øùÁî≤1228",
      cuisineType: "„Åù„Å∞„Éª„ÅÜ„Å©„Çì",
      priceRange: "1000-2000ÂÜÜ",
      coordinates: { lat: 38.0621, lng: 138.3667 },
      phone: "0259-67-7408",
      rating: 4.0,
      features: ["„ÉÜ„Ç§„ÇØ„Ç¢„Ç¶„ÉàÂèØ"],
      openingHours: [
        {
          day: "ÁÅ´ÊõúÊó•",
          open: "11:30",
          close: "20:00",
          isHoliday: false,
        },
      ],
      lastUpdated: "2025-08-01T00:00:00Z",
    },
  ];

  const defaultProps = {
    restaurants: mockRestaurants,
    center: { lat: 38.0751, lng: 138.4094 },
    loading: false,
  };

  beforeEach(() => {
    vi.clearAllMocks();
    // Map IDÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
    vi.stubEnv("VITE_GOOGLE_MAPS_MAP_ID", "test-map-id");
  });

  describe("Âü∫Êú¨„É¨„É≥„ÉÄ„É™„É≥„Ç∞", () => {
    it("Ê≠£Â∏∏„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      expect(screen.getByTestId("google-map")).toBeInTheDocument();
      expect(screen.getByTestId("google-map")).toHaveAttribute(
        "mapId",
        "test-map-id"
      );
    });

    it("„É¨„Çπ„Éà„É©„É≥„Éû„Éº„Ç´„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      const markers = screen.getAllByTestId("advanced-marker");
      expect(markers).toHaveLength(2);
      expect(markers[0]).toHaveAttribute("data-title", "ÂØøÂè∏Âá¶ÈáëÂ≥∞");
      expect(markers[1]).toHaveAttribute("data-title", "„Åù„Å∞Âá¶Á´π„ÅÆÂ≠ê");
    });

    it("ÂêÑ„Éû„Éº„Ç´„Éº„Å´ÈÅ©Âàá„Å™Â±ûÊÄß„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      const markers = screen.getAllByTestId("advanced-marker");
      expect(markers).toHaveLength(2);
      expect(markers[0]).toHaveAttribute("data-title", "ÂØøÂè∏Âá¶ÈáëÂ≥∞");
      expect(markers[1]).toHaveAttribute("data-title", "„Åù„Å∞Âá¶Á´π„ÅÆÂ≠ê");
    });
  });

  describe("„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã", () => {
    it("„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅØÂ∞ÇÁî®UI„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} loading={true} />);

      expect(screen.getByText("üó∫Ô∏è Âú∞Âõ≥„ÇíË™≠„ÅøËæº„Åø‰∏≠...")).toBeInTheDocument();
      expect(screen.queryByTestId("google-map")).not.toBeInTheDocument();
    });

    it("„É≠„Éº„Éá„Ç£„É≥„Ç∞UI„Å´ÈÅ©Âàá„Å™„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} loading={true} />);

      const loadingElement =
        screen.getByText("üó∫Ô∏è Âú∞Âõ≥„ÇíË™≠„ÅøËæº„Åø‰∏≠...").parentElement;
      expect(loadingElement).toHaveStyle({ height: "500px" });
      expect(loadingElement).toHaveClass("map-loading");
    });
  });

  describe("„Ç®„É©„ÉºÁä∂ÊÖã", () => {
    it("Map ID„ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØ„Ç®„É©„ÉºUI„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®", () => {
      vi.stubEnv("VITE_GOOGLE_MAPS_MAP_ID", undefined);

      render(<RestaurantMap {...defaultProps} />);

      expect(
        screen.getByText("‚ùå Map ID „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
      ).toBeInTheDocument();
      expect(screen.getByText("Áí∞Â¢ÉÂ§âÊï∞:").nextSibling).toBeInTheDocument();
      expect(screen.queryByTestId("google-map")).not.toBeInTheDocument();
    });

    it("„Ç®„É©„ÉºUI„Å´ÈÅ©Âàá„Å™„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã„Åì„Å®", () => {
      vi.stubEnv("VITE_GOOGLE_MAPS_MAP_ID", "");

      render(<RestaurantMap {...defaultProps} />);

      const errorElement = screen.getByText("‚ùå Map ID „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
        .parentElement as HTMLElement;
      expect(errorElement).toHaveStyle("height: 500px");
      expect(errorElement).toHaveClass("map-error");
    });
  });

  describe("„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥", () => {
    it("„Éû„Éº„Ç´„Éº„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´InfoWindow„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      const firstMarker = screen.getAllByTestId("advanced-marker")[0];
      fireEvent.click(firstMarker);

      expect(screen.getByTestId("info-window")).toBeInTheDocument();
      expect(screen.getByText("ÂØøÂè∏Âá¶ÈáëÂ≥∞")).toBeInTheDocument();
      expect(screen.getByText("üìç ‰ΩêÊ∏°Â∏Ç‰∏°Ê¥•Êπä353")).toBeInTheDocument();
      expect(screen.getByText("üçΩÔ∏è ÂØøÂè∏")).toBeInTheDocument();
      expect(screen.getByText("üìû 0259-27-5473")).toBeInTheDocument();
    });

    it("InfoWindowÈñâ„Åò„Çã„Éú„Çø„É≥„ÅßInfoWindow„ÅåÈùûË°®Á§∫„Å´„Å™„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      // „Éû„Éº„Ç´„Éº„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶InfoWindow„ÇíË°®Á§∫
      const firstMarker = screen.getAllByTestId("advanced-marker")[0];
      fireEvent.click(firstMarker);

      expect(screen.getByTestId("info-window")).toBeInTheDocument();

      // Èñâ„Åò„Çã„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const closeButton = screen.getByTestId("close-info-window");
      fireEvent.click(closeButton);

      expect(screen.queryByTestId("info-window")).not.toBeInTheDocument();
    });

    it("Ë§áÊï∞„ÅÆ„Éû„Éº„Ç´„Éº„ÇíÈ†ÜÊ¨°„ÇØ„É™„ÉÉ„ÇØ„Åß„Åç„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      const markers = screen.getAllByTestId("advanced-marker");

      // ÊúÄÂàù„ÅÆ„Éû„Éº„Ç´„Éº„Çí„ÇØ„É™„ÉÉ„ÇØ
      fireEvent.click(markers[0]);
      expect(screen.getByText("ÂØøÂè∏Âá¶ÈáëÂ≥∞")).toBeInTheDocument();

      // 2Áï™ÁõÆ„ÅÆ„Éû„Éº„Ç´„Éº„Çí„ÇØ„É™„ÉÉ„ÇØ
      fireEvent.click(markers[1]);
      expect(screen.getByText("„Åù„Å∞Âá¶Á´π„ÅÆÂ≠ê")).toBeInTheDocument();
      expect(screen.queryByText("ÂØøÂè∏Âá¶ÈáëÂ≥∞")).not.toBeInTheDocument(); // Ââç„ÅÆInfoWindow„ÅØÈñâ„Åò„Çã
    });
  });

  describe("AnalyticsÁµ±Âêà", () => {
    it("„Éû„Éº„Ç´„Éº„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Analytics„Ç§„Éô„É≥„Éà„ÅåÈÄÅ‰ø°„Åï„Çå„Çã„Åì„Å®", async () => {
      const { trackRestaurantClick, trackMapInteraction } = await import(
        "@/utils/analytics"
      );

      render(<RestaurantMap {...defaultProps} />);

      const firstMarker = screen.getAllByTestId("advanced-marker")[0];
      fireEvent.click(firstMarker);

      expect(trackRestaurantClick).toHaveBeenCalledWith({
        id: "1",
        name: "ÂØøÂè∏Âá¶ÈáëÂ≥∞",
        category: "ÂØøÂè∏",
        priceRange: "2000-3000ÂÜÜ",
      });

      expect(trackMapInteraction).toHaveBeenCalledWith("marker_click");
    });
  });

  describe("„Éó„É≠„ÉÉ„Éó„ÇπÊ§úË®º", () => {
    it("Á©∫„ÅÆ„É¨„Çπ„Éà„É©„É≥ÈÖçÂàó„Åß„ÇÇ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} restaurants={[]} />);

      expect(screen.getByTestId("google-map")).toBeInTheDocument();
      expect(screen.queryAllByTestId("advanced-marker")).toHaveLength(0);
    });

    it("phoneÊÉÖÂ†±„Åå„Å™„ÅÑ„É¨„Çπ„Éà„É©„É≥„Åß„ÇÇÊ≠£Â∏∏„Å´Ë°®Á§∫„Åï„Çå„Çã„Åì„Å®", () => {
      const restaurantWithoutPhone = [
        {
          ...mockRestaurants[0],
          phone: undefined,
        },
      ];

      render(
        <RestaurantMap {...defaultProps} restaurants={restaurantWithoutPhone} />
      );

      const marker = screen.getByTestId("advanced-marker");
      fireEvent.click(marker);

      expect(screen.getByText("ÂØøÂè∏Âá¶ÈáëÂ≥∞")).toBeInTheDocument();
      expect(screen.queryByText(/üìû/)).not.toBeInTheDocument();
    });

    it("center„Éó„É≠„ÉÉ„Éó„Çπ„ÅåÂú∞Âõ≥„Å´ÂèçÊò†„Åï„Çå„Çã„Åì„Å®", () => {
      const customCenter = { lat: 35.6762, lng: 139.6503 }; // Êù±‰∫¨

      render(<RestaurantMap {...defaultProps} center={customCenter} />);

      const mapElement = screen.getByTestId("google-map");
      expect(mapElement).toHaveAttribute("defaultCenter", "[object Object]");
    });
  });

  describe("„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£", () => {
    it("„Éû„Éº„Ç´„Éº„Å´titleÂ±ûÊÄß„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      const markers = screen.getAllByTestId("advanced-marker");
      expect(markers[0]).toHaveAttribute("data-title", "ÂØøÂè∏Âá¶ÈáëÂ≥∞");
      expect(markers[1]).toHaveAttribute("data-title", "„Åù„Å∞Âá¶Á´π„ÅÆÂ≠ê");
    });

    it("InfoWindowÂÜÖ„ÅÆÊÉÖÂ†±„ÅåÈÅ©Âàá„Å´ÊßãÈÄ†Âåñ„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®", () => {
      render(<RestaurantMap {...defaultProps} />);

      const firstMarker = screen.getAllByTestId("advanced-marker")[0];
      fireEvent.click(firstMarker);

      // Ë¶ãÂá∫„Åó„ÅåÈÅ©Âàá„Å´h3„Çø„Ç∞„Åß„ÅÇ„Çã„Åì„Å®
      expect(screen.getByRole("heading", { level: 3 })).toHaveTextContent(
        "ÂØøÂè∏Âá¶ÈáëÂ≥∞"
      );
    });
  });

  describe("„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ", () => {
    it("ÈùûÂ∏∏„Å´Èï∑„ÅÑ„É¨„Çπ„Éà„É©„É≥Âêç„Åß„ÇÇÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã„Åì„Å®", () => {
      const longNameRestaurant = [
        {
          ...mockRestaurants[0],
          name: "ÈùûÂ∏∏„Å´Èï∑„ÅÑ„É¨„Çπ„Éà„É©„É≥ÂêçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâç",
        },
      ];

      render(
        <RestaurantMap {...defaultProps} restaurants={longNameRestaurant} />
      );

      const marker = screen.getByTestId("advanced-marker");
      fireEvent.click(marker);

      // InfoWindowÂÜÖ„ÅÆh3Ë¶ÅÁ¥†„Åã„ÇâÈï∑„ÅÑÂêçÂâç„ÇíÊ§úË®º
      const longNameElement = screen.getByRole("heading", { level: 3 });
      expect(longNameElement).toHaveTextContent(
        "ÈùûÂ∏∏„Å´Èï∑„ÅÑ„É¨„Çπ„Éà„É©„É≥ÂêçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâçÂâç"
      );
    });

    it("Â∫ßÊ®ô„ÅåÊ•µÁ´Ø„Å™ÂÄ§„Åß„ÇÇ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Åì„Å®", () => {
      const extremeCoordinateRestaurant = [
        {
          ...mockRestaurants[0],
          coordinates: { lat: 85.0, lng: 180.0 }, // Ê•µÁ´Ø„Å™Â∫ßÊ®ô
        },
      ];

      render(
        <RestaurantMap
          {...defaultProps}
          restaurants={extremeCoordinateRestaurant}
        />
      );

      expect(screen.getByTestId("advanced-marker")).toBeInTheDocument();
    });
  });
});
