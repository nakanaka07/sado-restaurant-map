import { useCallback, useState } from "react";

interface ErrorState {
  message: string;
  code?: string;
  timestamp: Date;
  context?: string;
  severity: "low" | "medium" | "high" | "critical";
}

interface ErrorDetails {
  error: Error;
  context?: string;
  severity?: "low" | "medium" | "high" | "critical";
  user?: string;
  metadata?: Record<string, unknown>;
}

export function useErrorHandler() {
  const [error, setError] = useState<ErrorState | null>(null);
  const [errorHistory, setErrorHistory] = useState<ErrorState[]>([]);

  const handleError = useCallback((details: ErrorDetails) => {
    const { error, context = "Unknown", severity = "medium" } = details;

    const errorState: ErrorState = {
      message: error.message,
      code: "code" in error ? String(error.code) : undefined,
      timestamp: new Date(),
      context,
      severity,
    };

    // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØË©≥Á¥∞„Å™„É≠„Ç∞„ÇíÂá∫Âäõ
    if (import.meta.env.DEV) {
      console.group(`üö® Error in ${context}`);
      console.error("Error:", error);
      console.error("Stack:", error.stack);
      console.error("Metadata:", details.metadata);
      console.groupEnd();
    }

    // Êú¨Áï™Áí∞Â¢É„Åß„ÅØ„Ç®„É©„ÉºÂ†±Âëä„Çµ„Éº„Éì„Çπ„Å´ÈÄÅ‰ø°ÔºàÂ∞ÜÊù•ÂÆüË£ÖÔºâ
    if (import.meta.env.PROD) {
      // Â∞ÜÊù•: Sentry„ÄÅLogRocketÁ≠â„Å´ÈÄÅ‰ø°
      reportErrorToService(errorState, details);
    }

    setError(errorState);
    setErrorHistory((prev) => [errorState, ...prev.slice(0, 9)]); // ÊúÄÊñ∞10‰ª∂‰øùÊåÅ
  }, []);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const clearErrorHistory = useCallback(() => {
    setErrorHistory([]);
  }, []);

  // „Ç®„É©„Éº„É¨„Éô„É´Âà•„ÅÆ„Éè„É≥„Éâ„É©„Éº
  const handleCriticalError = useCallback(
    (error: Error, context?: string) => {
      handleError({ error, context, severity: "critical" });
      // „ÇØ„É™„ÉÜ„Ç£„Ç´„É´„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØËøΩÂä†„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥
      if (import.meta.env.PROD) {
        // Á∑äÊÄ•ÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
        console.error("Critical error occurred, attempting recovery...");
      }
    },
    [handleError]
  );

  const handleNetworkError = useCallback(
    (error: Error, context?: string) => {
      // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„ÉºÁâπÊúâ„ÅÆÂá¶ÁêÜ
      const networkErrorMessage = error.message.includes("fetch")
        ? "„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        : error.message;

      const networkError = new Error(networkErrorMessage);
      handleError({
        error: networkError,
        context: context || "Network",
        severity: "medium",
        metadata: { originalError: error.message },
      });
    },
    [handleError]
  );

  const handleValidationError = useCallback(
    (error: Error, context?: string) => {
      handleError({
        error,
        context: context || "Validation",
        severity: "low",
        metadata: { type: "validation" },
      });
    },
    [handleError]
  );

  return {
    error,
    errorHistory,
    handleError,
    handleCriticalError,
    handleNetworkError,
    handleValidationError,
    clearError,
    clearErrorHistory,
  };
}

// „Ç®„É©„ÉºÂ†±Âëä„Çµ„Éº„Éì„Çπ„Å∏„ÅÆÈÄÅ‰ø°ÔºàÂ∞ÜÊù•ÂÆüË£ÖÔºâ
function reportErrorToService(errorState: ErrorState, details: ErrorDetails) {
  // Â∞ÜÊù•ÁöÑ„Å´Sentry„ÄÅLogRocketÁ≠â„ÅÆ„Çµ„Éº„Éì„Çπ„Å´ÈÄÅ‰ø°
  // ÁèæÂú®„ÅØconsole.error„Åß‰ª£Êõø
  console.error("Error reported to service:", {
    errorState,
    details: {
      ...details,
      error: {
        name: details.error.name,
        message: details.error.message,
        stack: details.error.stack,
      },
    },
  });
}

// „Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº„Éè„É≥„Éâ„É©„ÉºÔºàmain.tsx„Åß‰ΩøÁî®Ôºâ
export function setupGlobalErrorHandling() {
  // Êú™Âá¶ÁêÜ„ÅÆPromiseÊãíÂê¶„Çí„Ç≠„É£„ÉÉ„ÉÅ
  window.addEventListener("unhandledrejection", (event) => {
    console.error("Unhandled promise rejection:", event.reason);
    event.preventDefault(); // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Ç®„É©„ÉºË°®Á§∫„ÇíÊäëÂà∂
  });

  // ‰∏ÄËà¨ÁöÑ„Å™JavaScript„Ç®„É©„Éº„Çí„Ç≠„É£„ÉÉ„ÉÅ
  window.addEventListener("error", (event) => {
    console.error("Global error:", event.error || event.message);
  });

  // React„Ç®„É©„Éº„Éê„Ç¶„É≥„ÉÄ„É™„Éº„Åß„Ç≠„É£„ÉÉ„ÉÅ„Åß„Åç„Å™„ÅÑ„Ç®„É©„Éº
  window.addEventListener("load", () => {
    const originalConsoleError = console.error;
    console.error = (...args: unknown[]) => {
      // React DevTools„ÅÆ„Ç®„É©„Éº„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
      const firstArg: unknown = args[0];
      if (typeof firstArg === "string" && !firstArg.includes("Warning:")) {
        originalConsoleError.apply(console, args);
      } else if (
        firstArg &&
        typeof firstArg === "object" &&
        firstArg !== null &&
        "toString" in firstArg &&
        typeof firstArg.toString === "function"
      ) {
        const stringified = (firstArg as { toString(): string }).toString();
        if (!stringified.includes("Warning:")) {
          originalConsoleError.apply(console, args);
        }
      } else {
        originalConsoleError.apply(console, args);
      }
    };
  });
}

// React Error BoundaryÁî®„ÅÆ„Ç®„É©„Éº„É¨„Éù„Éº„Éà
export function reportErrorBoundaryError(
  error: Error,
  errorInfo: { componentStack: string }
) {
  const errorDetails = {
    error,
    context: "React Error Boundary",
    severity: "high" as const,
    metadata: {
      componentStack: errorInfo.componentStack,
      timestamp: new Date().toISOString(),
    },
  };

  if (import.meta.env.DEV) {
    console.group("üî¥ React Error Boundary");
    console.error("Error:", error);
    console.error("Component Stack:", errorInfo.componentStack);
    console.groupEnd();
  }

  // Êú¨Áï™Áí∞Â¢É„Åß„ÅØ„Çµ„Éº„Éì„Çπ„Å´Â†±Âëä
  if (import.meta.env.PROD) {
    reportErrorToService(
      {
        message: error.message,
        code: error.name,
        timestamp: new Date(),
        context: "React Error Boundary",
        severity: "high",
      },
      errorDetails
    );
  }
}
